package com.pf.leetcode.jihe;

import org.springframework.util.CollectionUtils;

import java.util.*;
import java.util.stream.Collectors;

public class GenerateMatrix {
    public static void main(String[] args) {
//        System.out.println(new GenerateMatrix().generateMatrix(3));
        int[] nums = new int[]{
                13981,11,25,10535,19565,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,19379,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,72977,2269,2269,2269,2269,2269,2269,2269,2269,2269,2269,2269,2269,2269,2269,2269,2269,33533,155,145,4205,4495,725,29,29,145,25,725,5,145,5,5,155,155,5,5,5,1121,1121,59,59,59,361,19,19,19,1121,19,361,1121,1121,361,361,19,19,80246,4,2,2,2,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,37717,4042,86,2,172,86,4042,4042,172,3698,172,2,172,86,2,172,43,1849,3698,13,121,143,143,11,11,11,143,143,93,31,31,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797,44797
        };
//        System.out.println(new GenerateMatrix().replaceNonCoprimes(nums));
        System.out.println(new GenerateMatrix().longestPalindrome("abccccdd"));
    }

    public int longestPalindrome(String s) {
        Map<Character, Integer> map = new HashMap();
        for (int i = 0; i < s.length(); i++) {
            int count = map.getOrDefault(s.charAt(i), 0);
            map.put(s.charAt(i), ++count);
        }
        int ans = 0;
        for (Integer value : map.values()) {
            ans += value / 2 * 2;
        }
        return ans + ans == s.length() ? 0 : 1;
    }

    public List<Integer> replaceNonCoprimes(int[] nums) {

        Stack<Integer> que = new Stack<>();
        int gcd = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 13) {
                System.out.println("aa");
            }
            if (que.isEmpty()) {
                que.push(nums[i]);
                continue;
            }
            int tmp = nums[i];
            while (!que.isEmpty() && (gcd = gcd(que.peek(), tmp)) > 1) {
                int fir = que.pop();
                tmp = fir / gcd * nums[i];
            }
            que.push(tmp);
        }
        LinkedList<Integer> list = new LinkedList<>();
        while (!que.isEmpty()) {
            list.addFirst(que.pop());
        }
        return list;
    }


    private int gcd(int a, int b) {
        return a % b == 0 ? b : gcd(b, a % b);
    }
    public int[][] generateMatrix(int n) {
        int[][] res = new int[n][n];
        int row = 0;
        int col = 0;
        int top = 1;
        int max = n * n;
        int count = 0;
        while (top <= max) {
            while (top <= max && col < n - count) {
                res[row][col++] = top++;
            }

            row++;
            col--;
            while (top <= max && row < n - count) {
                res[row++][col] = top++;
            }

            row--;
            col--;
            while (top <= max && col >= count) {
                res[row][col--] = top++;
            }

            row--;
            while (top <= max && row > count) {
                res[row--][count] = top++;
            }
            count++;
        }

        return res;
    }
}
